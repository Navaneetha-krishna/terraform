# Terraform Cheat Sheet

## 📌 **Basic Commands**

```bash
terraform init          # Initialize a Terraform project
terraform plan         # Show execution plan
terraform apply        # Apply changes to infrastructure
terraform destroy      # Destroy all managed resources
terraform validate     # Validate Terraform configuration
terraform fmt          # Format configuration files
terraform output       # Show output values
terraform show         # Show state or plan details
terraform providers    # Show used providers
```

## 📂 **File Structure**

```plaintext
project/
├── main.tf        # Main configuration file
├── variables.tf   # Variable definitions
├── outputs.tf     # Output values
├── providers.tf   # Provider configurations
├── terraform.tfvars # Variable values
└── modules/       # Reusable modules
```

## 🎛️ **Configuration Blocks**

### **1. Provider Block**
```hcl
provider "aws" {
  region = "us-east-1"
}
```

### **2. Resource Block**
```hcl
resource "aws_instance" "example" {
  ami           = "ami-12345678"
  instance_type = "t2.micro"
  tags = {
    Name = "ExampleInstance"
  }
}
```

### **3. Variables**
```hcl
variable "instance_type" {
  type    = string
  default = "t2.micro"
}
```

### **4. Outputs**
```hcl
output "instance_ip" {
  value = aws_instance.example.public_ip
}
```

## 🔄 **Terraform Workflow**

1. **Initialize**: `terraform init`
2. **Plan Changes**: `terraform plan`
3. **Apply Changes**: `terraform apply`
4. **Destroy Resources**: `terraform destroy`

## 🔧 **State Management**

```bash
terraform state list               # List resources in state
terraform state show <resource>    # Show details of a resource
terraform state rm <resource>      # Remove a resource from state
terraform taint <resource>         # Mark a resource for recreation
```

## 🔀 **Modules**

### **Module Example**
```hcl
module "vpc" {
  source = "terraform-aws-modules/vpc/aws"
  version = "3.0"
  cidr = "10.0.0.0/16"
}
```

## 🔑 **Terraform Backend (Remote State)**

```hcl
terraform {
  backend "s3" {
    bucket = "my-terraform-state"
    key    = "state/terraform.tfstate"
    region = "us-east-1"
  }
}
```

## ⚙️ **Useful Flags**

```bash
terraform apply -auto-approve    # Apply without confirmation
terraform destroy -force         # Destroy without confirmation
terraform plan -out=tfplan       # Save plan to file
terraform apply tfplan           # Apply from saved plan
```

## 🚀 **Best Practices**

✅ Use version control (Git) for Terraform code  
✅ Store Terraform state remotely (S3, Terraform Cloud)  
✅ Use modules for reusable components  
✅ Implement proper access controls  
✅ Regularly format & validate configuration (`terraform fmt`, `terraform validate`)  

-
📝 **Keep this cheat sheet handy while working with Terraform!** 🚀

